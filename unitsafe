/** -*- mode: c++ -*-
 *
 * unitsafe
 *
 * Wrappers used to constrain the use of simpler types in order to
 * improve code safety.
 *
 * Copyright (C) 2015 Brian Davis
 * All Rights Reserved
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Author: Brian Davis <bd@jollyrogerlabs.com>
 *
 */

#if !defined(UNITSAFE_GUARD)
#define UNITSAFE_GUARD

#include <sstream>
#include <type_traits>
#include <cmath>

// #ifdef USE_UNITSAFE

namespace jrl
{

/**
 * Wrapper for constructing a safe type around a simple numeric type.
 */
template<typename _BaseType, typename _TypeTag>
class UnitSafeWrapper
{
public:
  using base_type = _BaseType;
  // constexpr static const unsigned type_tag = _TypeTag;

  UnitSafeWrapper()
    : value_()
  {
  }

  UnitSafeWrapper(const _BaseType value)
    : value_(value)
  {
  }

  UnitSafeWrapper &
  operator=(const UnitSafeWrapper &rhs)
  {
    if (&rhs == this) {
      return *this;
    }
    value_ = rhs.value_;
    return *this;
  }

  bool
  operator==(const UnitSafeWrapper &rhs) const
  {
    return value_ == rhs.value_;
  }

  bool
  operator!=(const UnitSafeWrapper &rhs) const
  {
    return !(*this == rhs);
  }

  bool
  operator<(const UnitSafeWrapper &rhs) const
  {
    return value_ < rhs.value_;
  }

  bool
  operator>(const UnitSafeWrapper &rhs) const
  {
    return value_ > rhs.value_;
  }

  bool
  operator<=(const UnitSafeWrapper &rhs) const
  {
    return value_ <= rhs.value_;
  }

  bool
  operator>=(const UnitSafeWrapper &rhs) const
  {
    return value_ >= rhs.value_;
  }

  UnitSafeWrapper
  operator+(const UnitSafeWrapper &rhs) const
  {
    return value_ + rhs.value_;
  }

  UnitSafeWrapper
  operator-(const UnitSafeWrapper &rhs) const
  {
    return value_ - rhs.value_;
  }

  UnitSafeWrapper
  operator-() const
  {
    return -value_;
  }

  UnitSafeWrapper
  operator*(const UnitSafeWrapper &rhs) const
  {
    return value_ * rhs.value_;
  }

  UnitSafeWrapper
  operator/(const UnitSafeWrapper &rhs) const
  {
    return value_ / rhs.value_;
  }

  UnitSafeWrapper
  operator+=(const UnitSafeWrapper &rhs) const
  {
    return value_ = value_ + rhs.value_;
  }

  UnitSafeWrapper
  operator-=(const UnitSafeWrapper &rhs) const
  {
    return value_ = value_ - rhs.value_;
  }

  UnitSafeWrapper
  operator*=(const UnitSafeWrapper &rhs) const
  {
    return value_ = value_ * rhs.value_;
  }

  UnitSafeWrapper
  operator/=(const UnitSafeWrapper &rhs) const
  {
    return value_ = value_ / rhs.value_;
  }

  explicit
  operator _BaseType() const
  {
    return value_;
  }

private:
  _BaseType value_;
};

/**
 * Helper macro which creates a new safe type that wraps a base type.
 *
 * NOTE: this macro cannot be used create a publicly accessible type
 * in a class, use MAKE_PUBLIC_UNITSAFE instead.
 */
#define MAKE_UNITSAFE(UnitSafeType, BaseType)				\
  namespace unitsafetag { struct UnitSafeType ## TAG {}; }		\
  using UnitSafeType = UnitSafeWrapper<BaseType, unitsafetag::UnitSafeType ## TAG>

/**
 * Helper macro which creates a new safe type that wraps a base type
 * and exists within an enclosing class.
 */
#define MAKE_CONTAINED_UNITSAFE(UnitSafeType, BaseType, accessibility)	\
private:								\
  struct UnitSafeType ## TAG {};					\
accessibility:								\
  using UnitSafeType = UnitSafeWrapper<BaseType, UnitSafeType ## TAG>

/**
 * Helper macro which creates a new safe type that wraps a base type
 * and is publicly accessible from within its enclosing class.
 */
#define MAKE_PUBLIC_UNITSAFE(UnitSafeType, BaseType)		\
  MAKE_CONTAINED_UNITSAFE(UnitSafeType, BaseType, public)

/**
 * Helper macro that uses some type system magic to simplify the
 * casting of a safe type constructed from UnitSafeWrapper to the base
 * type which can be used in operations with other types.
 *
 * NOTE: this will also cast away a reference modifier on the type of
 * the argument value.
 */
#define BASE_CAST(val)							\
  static_cast<typename std::remove_reference<decltype(val)>::type::base_type>(val)

#define BASE_TYPE(Type) Type::base_type

} // namespace jrl

namespace
{
// Various helper template functions defined inline in an empty
// namespace to (hopefully) avoid the problem of multiply-defined
// symbols while making life easier.

/**
 * sqrt
 */
template<typename _BaseType, typename _TypeTag>
inline typename jrl::UnitSafeWrapper<_BaseType, _TypeTag>::base_type
sqrt(const typename jrl::UnitSafeWrapper<_BaseType, _TypeTag> val)
{
  return ::sqrt(BASE_CAST(val));
}

/**
 * tan
 */
template<typename _BaseType, typename _TypeTag>
inline typename jrl::UnitSafeWrapper<_BaseType, _TypeTag>::base_type
tan(const typename jrl::UnitSafeWrapper<_BaseType, _TypeTag> val)
{
  return ::tan(BASE_CAST(val));
}

/**
 * tanf
 */
template<typename _BaseType, typename _TypeTag>
inline typename jrl::UnitSafeWrapper<_BaseType, _TypeTag>::base_type
tanf(const typename jrl::UnitSafeWrapper<_BaseType, _TypeTag> val)
{
  return ::tanf(BASE_CAST(val));
}

// \TODO add other standard math functions

#if defined(USE_EXPERIMENTAL_UNITSAFE_STREAM_OPERATOR)
// \TODO experimental, not sure if this will ever work...
/**
 * Override of operator<< for types derived from UnitSafeWrapper.
 *
 * NOTE: this is defined inline in text of the target translation unit
 * to (hopefully) avoid the problem of multiply defined symbols.
 */
template<typename _BaseType, typename _TypeTag>
inline std::ostream &
operator<<(std::ostream &strm, const jrl::UnitSafeWrapper<_BaseType, _TypeTag>& val)
{
  strm << static_cast<typename jrl::UnitSafeWrapper<_BaseType, _TypeTag>::base_type>(val);
  return strm;
}
#endif // #if defined(USE_EXPERIMENTAL_UNITSAFE_STREAM_OPERATOR)
} // empty namespace

#else

namespace jrl
{

#define MAKE_UNITSAFE(UnitSafeType, BaseType, TypeTag) using UnitSafeType = BaseType

#define BASE_CAST(val) val

#define BASE_TYPE(Type) Type

}

// #endif // USE_UNITSAFE

#endif // UNITSAFE_GUARD
