/** -*- mode: c++ -*-
 *
 * unitsafe
 *
 * Wrappers used to constrain the use of simpler types in order to
 * improve code safety.
 *
 * Copyright (C) 2015 Brian Davis
 * All Rights Reserved
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Author: Brian Davis <bd@jollyrogerlabs.com>
 *
 */

#ifndef UNITSAFE_GUARD
#define UNITSAFE_GUARD

namespace jrl
{

/**
 * Wrapper for constructing a safe type around a simple numeric type.
 *
 * \TODO use static assert to force the b
 */
template<typename _BaseType, unsigned _TypeTag>
class UnitSafeWrapper
{
public:
  enum {
    type_tag = _TypeTag
  };

  UnitSafeWrapper(const _BaseType value)
    : value_(value)
  {
  }

  UnitSafeWrapper &
  operator=(const UnitSafeWrapper &rhs)
  {
    if (&rhs == this) {
      return *this;
    }
    value_ = rhs.value_;
    return *this;
  }

  bool
  operator==(const UnitSafeWrapper &rhs) const
  {
    return value_ == rhs.value_;
  }

  bool
  operator!=(const UnitSafeWrapper &rhs) const
  {
    return !(*this == rhs);
  }

  bool
  operator<(const UnitSafeWrapper &rhs) const
  {
    return value_ < rhs.value_;
  }

  bool
  operator>(const UnitSafeWrapper &rhs) const
  {
    return value_ > rhs.value_;
  }

  bool
  operator<=(const UnitSafeWrapper &rhs) const
  {
    return value_ <= rhs.value_;
  }

  bool
  operator>=(const UnitSafeWrapper &rhs) const
  {
    return value_ >= rhs.value_;
  }

  UnitSafeWrapper
  operator+(const UnitSafeWrapper &rhs) const
  {
    return value_ + rhs.value_;
  }

  UnitSafeWrapper
  operator-(const UnitSafeWrapper &rhs) const
  {
    return value_ - rhs.value_;
  }

  UnitSafeWrapper
  operator*(const UnitSafeWrapper &rhs) const
  {
    return value_ * rhs.value_;
  }

  UnitSafeWrapper
  operator/(const UnitSafeWrapper &rhs) const
  {
    return value_ / rhs.value_;
  }

  UnitSafeWrapper
  operator+=(const UnitSafeWrapper &rhs) const
  {
    return value_ = value_ + rhs.value_;
  }

  UnitSafeWrapper
  operator-=(const UnitSafeWrapper &rhs) const
  {
    return value_ = value_ - rhs.value_;
  }

  UnitSafeWrapper
  operator*=(const UnitSafeWrapper &rhs) const
  {
    return value_ = value_ * rhs.value_;
  }

  UnitSafeWrapper
  operator/=(const UnitSafeWrapper &rhs) const
  {
    return value_ = value_ / rhs.value_;
  }

  explicit
  operator _BaseType() const
  {
    return value_;
  }

private:
  _BaseType value_;
};

#define MAKE_UNITSAFE(name, type)			\
  using name = UnitSafeWrapper<type, __COUNTER__>

} // namespace jrl

#endif // UNITSAFE_GUARD
