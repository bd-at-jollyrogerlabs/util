/** -*- mode: c++ -*-
 *
 * unitsafe
 *
 * Wrappers used to constrain the use of simpler types in order to
 * improve code safety.
 *
 * Copyright (C) 2015 Brian Davis
 * All Rights Reserved
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Author: Brian Davis <bd@jollyrogerlabs.com>
 *
 */

#if !defined(UNITSAFE_GUARD)
#define UNITSAFE_GUARD

#include <sstream>
#include <type_traits>

namespace jrl
{

/**
 * Wrapper for constructing a safe type around a simple numeric type.
 */
template<typename _BaseType, typename _TypeTag>
class UnitSafeWrapper
{
  static_assert(std::is_fundamental<_BaseType>::value,
		"UnitSafeWrapper is only usable with fundamental types");
public:
  // @todo 'type' may be too confusing, maybe base_type?  or
  // underlying_type, which may actually be reserved in C++14
  using type = _BaseType;

  UnitSafeWrapper()
    : value_()
  {
  }

  // NOTE: UnitSafeWrapper is designed for fundamental types
  UnitSafeWrapper(_BaseType value)
    : value_(value)
  {
  }

  UnitSafeWrapper &
  operator=(UnitSafeWrapper rhs)
  {
    if (&rhs != this) {
      value_ = rhs.value_;
    }
    return *this;
  }

#define MAKE_COMPOUND_OPERATOR(op)		\
  inline UnitSafeWrapper &			\
  operator op(const UnitSafeWrapper &rhs)	\
  {						\
    value_ op rhs.value_;			\
    return *this;				\
  }

  MAKE_COMPOUND_OPERATOR(+=)

  MAKE_COMPOUND_OPERATOR(-=)

  MAKE_COMPOUND_OPERATOR(*=)

  MAKE_COMPOUND_OPERATOR(/=)

  MAKE_COMPOUND_OPERATOR(%=)

  MAKE_COMPOUND_OPERATOR(|=)

  MAKE_COMPOUND_OPERATOR(&=)

  MAKE_COMPOUND_OPERATOR(^=)

  explicit
  operator _BaseType() const
  {
    return value_;
  }

private:
  _BaseType value_;
};

// binary comparison operators

#define MAKE_COMPARISON_OPERATOR(op)					\
  template<typename _BaseType, typename _TypeTag>			\
  inline bool								\
  operator op(const UnitSafeWrapper<_BaseType, _TypeTag> &lhs,		\
	      const UnitSafeWrapper<_BaseType, _TypeTag> &rhs)		\
  {									\
    return base_cast(lhs) op base_cast(rhs);				\
  }

MAKE_COMPARISON_OPERATOR(==)

MAKE_COMPARISON_OPERATOR(!=)

MAKE_COMPARISON_OPERATOR(<)

MAKE_COMPARISON_OPERATOR(<=)

MAKE_COMPARISON_OPERATOR(>)

MAKE_COMPARISON_OPERATOR(>=)

#undef MAKE_COMPARISON_OPERATOR

#define MAKE_OPERATOR(binOp, compoundOp)				\
  template<typename _BaseType, typename _TypeTag>			\
  inline UnitSafeWrapper<_BaseType, _TypeTag>				\
  operator binOp(const UnitSafeWrapper<_BaseType, _TypeTag> &lhs,	\
		 const UnitSafeWrapper<_BaseType, _TypeTag> &rhs)	\
  {									\
    using WrappedType = UnitSafeWrapper<_BaseType, _TypeTag>;		\
    WrappedType result(lhs);						\
    result compoundOp rhs;						\
    return result;							\
  }

// binary arithmetic operators

MAKE_OPERATOR(+, +=)

MAKE_OPERATOR(-, -=)

MAKE_OPERATOR(*, *=)

MAKE_OPERATOR(/, /=)

MAKE_OPERATOR(%, %=)

// binary bitwise operators

MAKE_OPERATOR(|, |=)

MAKE_OPERATOR(&, &=)

MAKE_OPERATOR(^, ^=)

#undef MAKE_OPERATOR

template<typename _BaseType, typename _TypeTag>
inline std::ostream &
operator<<(std::ostream &strm, const UnitSafeWrapper<_BaseType, _TypeTag>& val)
{
  strm << static_cast<typename UnitSafeWrapper<_BaseType, _TypeTag>::type>(val);
  return strm;
}

// @todo do something smart with type_traits to avoid creation of a
// temporary?
template<typename _UnitSafeType>
inline typename _UnitSafeType::type
base_cast(_UnitSafeType arg)
{
  return typename _UnitSafeType::type(arg);
}

} // namespace jrl

/**
 * Helper macro which creates a new safe type that wraps a base type.
 *
 * NOTE: this macro cannot be used create a publicly accessible type
 * in a class, use MAKE_PUBLIC_UNITSAFE instead.
 */
#define MAKE_UNITSAFE(UnitSafeType, BaseType)				\
  namespace jrl_unitsafetag { struct UnitSafeType ## TAG {}; }		\
  using UnitSafeType =							\
    jrl::UnitSafeWrapper<BaseType, jrl_unitsafetag::UnitSafeType ## TAG>

/**
 * Helper macro which creates a new safe type that wraps a base type
 * and exists within an enclosing class.
 */
#define MAKE_CONTAINED_UNITSAFE(UnitSafeType, BaseType, accessibility)	\
private:								\
  struct UnitSafeType ## TAG {};					\
accessibility:								\
 using UnitSafeType = jrl::UnitSafeWrapper<BaseType, UnitSafeType ## TAG>

/**
 * Helper macro which creates a new safe type that wraps a base type
 * and is publicly accessible from within its enclosing class.
 */
#define MAKE_PUBLIC_UNITSAFE(UnitSafeType, BaseType)		\
  MAKE_CONTAINED_UNITSAFE(UnitSafeType, BaseType, public)

#endif // UNITSAFE_GUARD
