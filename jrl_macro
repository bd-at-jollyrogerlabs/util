/** -*- mode: c++ -*-
 *
 * jrl_macro
 *
 * Useful macros.
 *
 * Copyright (C) 2014 Brian Davis
 * All Rights Reserved
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Author: Brian Davis <bd@jollyrogerlabs.com>
 *
 */

#if !defined(JRL_MACRO_GUARD)
#define JRL_MACRO_GUARD

#include <stdexcept>
#include <sstream>

/**
 * Replacement for assert() which will also abort the program during
 * release builds.
 *
 * FIXME: find some tricky way for the NDEBUG version to print more
 * details (e.g. print the operands when the failed predicate is
 * operator==).
 *
 */
#if defined(NDEBUG)
#define ASSERT(predicate)			\
  do {						\
    if (!(predicate)) {				\
      abort();					\
    }						\
  } while (0)
#else
#define ASSERT(predicate)			\
  do {						\
    assert(predicate);				\
  } while(0)
#endif

#define UNUSED __attribute__((unused))

/**
 * Macro double expansion trick to produce a string from a non-string
 * token that is already a macro, (e.g. __LINE__).
 */
#define JRL_STRINGIFY_(x) #x
#define JRL_STRINGIFY(x) JRL_STRINGIFY_(x)

#define ERR_MSG_LOCATION "at " __FILE__ "(" JRL_STRINGIFY(__LINE__) "), "

/**
 * Produce an error message that has file name and line number
 * embedded in it.
 */
#define ERR_MSG_HELPER(msg) ERR_MSG_LOCATION msg

/**
 * Throw an instance of std::system_error which embeds the file name,
 * line number and a user defined string.
 */
#define THROW_SYSTEM_ERROR(msg)						\
  do {									\
    std::ostringstream ss;						\
    const std::string location(ERR_MSG_LOCATION);			\
    ss << location << msg;						\
    throw std::system_error(errno, std::system_category(), ss.str());	\
  } while (0)

/**
 * Easily define an exception type that derives from
 * std::runtime_error
 */
#define DEF_RUNTIME_EXCEPTION(name)		\
  class name : public std::runtime_error	\
  {						\
  public:					\
    name(const std::string &what)		\
      : std::runtime_error(what) {}		\
}

/**
 * Helper macro for simplifying the use of exceptions.
 */
// @todo use basename of filename
#define THROW_EXCEPTION(ExceptionType, msg)				\
  do {									\
    std::ostringstream what;						\
    what << "'" << msg << "' on line " << __LINE__ << " of file " << __FILE__; \
    throw ExceptionType(what.str());					\
  } while(0)

#define THROW_ON_FAIL(predicate, ExceptionType, msg)	\
  do {							\
    if (!(predicate)) {					\
      THROW_EXCEPTION(ExceptionType, msg);		\
    }							\
  } while (0)

/**
 * Helper macro for wrapping the behavior of calling a system
 * function, checking the return code against a known error value and
 * throwing an appropriate exception if an error is detected.
 *
 * NOTE: this only works for functions which return a single error
 * value (e.g. -1 or nullptr) and set errno appropriately, which does
 * not include several classes of system functions
 * (e.g. pthread_create, which returns 0 on success and an error code
 * on error, or gethostbyname_r, which returns nullptr on error but
 * uses h_errno to report the cause)
 */
#define CALL_SYSTEM_FUNC(func, errVal, errMsg)		\
  do {							\
    if (errVal == (func)) {				\
      THROW_SYSTEM_ERROR(errMsg);			\
    }							\
  } while (0)


#define DEFAULT_CONSTRUCTABLE(Class) Class() = default

#define NON_DEFAULT_CONSTRUCTABLE(Class) Class() = delete

#define DEFAULT_DESTRUCTABLE(Class) ~Class() = default

#define DEFAULT_VIRTUAL_DESTRUCTABLE(Class) virtual ~Class() = default

#define DEFAULT_COPYABLE(Class)			\
  Class(const Class &src) = default;		\
  Class& operator=(const Class &rhs) = default

#define NON_COPYABLE(Class)			\
  Class(const Class &src) = delete;		\
  Class& operator=(const Class &rhs) = delete

#define DEFAULT_MOVEABLE(Class)			\
  Class(Class &&src) = default;			\
  Class& operator=(Class &&rhs) = default

#define NON_MOVEABLE(Class)			\
  Class(Class &&src) = delete;			\
  Class& operator=(Class &&rhs) = delete

#endif // JRL_MACRO_GUARD
