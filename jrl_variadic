/** -*- mode: c++ -*-
 *
 * jrl_variadic
 *
 * Useful utility classes and functions related to variadic template
 * metaprogramming.
 *
 * Copyright (C) 2014 Brian Davis
 * All Rights Reserved
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Author: Brian Davis <bd@jollyrogerlabs.com>
 *
 */

#if !defined(JRL_VARIADIC_GUARD)
#define JRL_UTIL_GUARD 1

namespace jrl
{


// policy binder macros

/**
 * Use POLICY_BINDER_TYPE macro to define the basic body of a policy
 * binder type.
 */
#define POLICY_BINDER_TYPE(PolicyBinderType, DefaultPolicyType)		\
/* declaration */							\
template<typename... Policies>					        \
struct PolicyBinderType;						\
/* default */								\
template<>								\
struct PolicyBinderType<>						\
{									\
  using type = DefaultPolicyType;					\
  static const unsigned is_non_default = 0;				\
};									\
/* not bound */							        \
template<typename First, typename... Rest>				\
struct PolicyBinderType<First, Rest...>				\
{									\
  /* use the previously bound policy */					\
  using type = typename PolicyBinderType<Rest...>::type;		\
  /* use the previously set match count */				\
  static const unsigned is_non_default =				\
    PolicyBinderType<Rest...>::is_non_default;				\
}

/**
 * Use TAGGED_POLICY_BINDER_TYPE macro to define the basic body of a
 * policy binder type that can detect subclasses of a tag type.
 */
#define TAGGED_POLICY_BINDER_TYPE(PolicyBinderType, DefaultPolicyType, TagType)	\
/* declaration */							\
template<typename... Policies>					        \
struct PolicyBinderType;						\
/* default */								\
template<>								\
struct PolicyBinderType<>						\
{									\
  using type = DefaultPolicyType;					\
  static const unsigned is_non_default = 0;				\
};									\
/* not bound */							        \
template<typename First, typename... Rest>				\
struct PolicyBinderType<First, Rest...>				        \
{									\
private:								\
  using remainder = typename PolicyBinderType<Rest...>::type;		\
  static const unsigned remainder_is_non_default =			\
    PolicyBinderType<Rest...>::is_non_default;				\
  static const bool is_tagged =						\
    std::is_base_of<TagType, First>::value;				\
  /* only one match is allowed per policy */				\
  static_assert(!is_tagged || 0 == remainder_is_non_default,		\
		"some policy was previously matched for " #PolicyBinderType \
		" when " #TagType " was encountered");			\
public:								        \
  /* use the previously bound policy unless the tag matches */		\
  using type = typename std::conditional<is_tagged, First, remainder>::type; \
  /* use the previously set match count */				\
  static const unsigned is_non_default =				\
    is_tagged ? 1 : remainder_is_non_default;				\
}

/**
 * Use ADD_POLICY_CHOICE macro to add a specific optional policy to
 * the desired policy binder type.
 */
#define ADD_POLICY_CHOICE(PolicyBinderType, SpecializationType)		\
template<typename... Rest>						\
struct PolicyBinderType<SpecializationType, Rest...>			\
{									\
  /* only one match is allowed per policy */				\
  static_assert(0 == PolicyBinderType<Rest...>::is_non_default,		\
		"some policy was previously matched for " #PolicyBinderType \
		" when " #SpecializationType " was encountered");	\
  using type = SpecializationType;					\
  /* set the match count to 1 to indicate that a non-default policy */	\
  /* has been selected from the policy parameter pack */		\
  static const unsigned is_non_default = 1;				\
}

/**
 * Use POLICY_BINDER_TYPE_1_ARG macro to define the basic body of a
 * policy binder type which takes 1 prefix type parameter.
 */
#define POLICY_BINDER_TYPE_1_ARG(PolicyBinderType, DefaultPolicyType, TypeParameter1) \
/* declaration */							\
template<typename TypeParameter1, typename... Policies>		        \
struct PolicyBinderType;						\
/* default */								\
template<typename TypeParameter1>					\
struct PolicyBinderType<TypeParameter1>				        \
{									\
  using type = DefaultPolicyType;					\
  static const unsigned is_non_default = 0;				\
};									\
/* induction case: the current first entry in the parameter pack is */  \
/* not a known policy type so it can be skipped */			\
template<typename TypeParameter1, typename First, typename... Rest>	\
struct PolicyBinderType<TypeParameter1, First, Rest...>		        \
{									\
  /* use the previously bound policy */					\
  using type = typename PolicyBinderType<TypeParameter1, Rest...>::type; \
  /* use the previously set match count */				\
  static const unsigned is_non_default =				\
    PolicyBinderType<TypeParameter1, Rest...>::is_non_default;		\
}

/**
 * Use ADD_POLICY_CHOICE_1_ARG macro to add a specific optional policy
 * to the desired policy binder type.
 */
#define ADD_POLICY_CHOICE_1_ARG(PolicyBinderType, SpecializationType, TypeParameter1) \
template<typename TypeParameter1, typename... Rest>			\
struct PolicyBinderType<TypeParameter1, SpecializationType, Rest...>    \
{									\
  /* only one match is allowed per policy */				\
  static_assert(0 == PolicyBinderType<TypeParameter1, Rest...>::is_non_default, \
		"some policy was previously matched for " #PolicyBinderType \
		" when " #SpecializationType " was encountered");	\
  /* use rebind technique to extract a properly parameterized type */	\
  using type = typename SpecializationType::rebind<TypeParameter1>::type; \
  /* set the match count to 1 to indicate that a non-default policy */	\
  /* has been selected from the policy parameter pack */		\
  static const unsigned is_non_default = 1;				\
}

/**
 * Use TAGGED_POLICY_BINDER_TYPE_1_ARG macro to define the basic body
 * of a policy binder type which takes 1 prefix type parameter and can
 * detect subclasses of a tag type.
 */
#define TAGGED_POLICY_BINDER_TYPE_1_ARG(PolicyBinderType, DefaultPolicyType, TypeParameter1, TagType) \
/* declaration */							\
template<typename TypeParameter1, typename... Policies>		        \
struct PolicyBinderType;						\
/* default */								\
template<typename TypeParameter1>					\
struct PolicyBinderType<TypeParameter1>				        \
{									\
  using type = DefaultPolicyType;					\
  static const unsigned is_non_default = 0;				\
};									\
/* induction case: the current first entry in the parameter pack is */  \
/* not a known policy type so it can be skipped */			\
template<typename TypeParameter1, typename First, typename... Rest>	\
struct PolicyBinderType<TypeParameter1, First, Rest...>		        \
{									\
private:								\
  using remainder = typename PolicyBinderType<TypeParameter1, Rest...>::type; \
  static const unsigned remainder_is_non_default =			\
    PolicyBinderType<TypeParameter1, Rest...>::is_non_default;		\
  static const bool is_tagged =						\
    std::is_base_of<TagType, First>::value;				\
  /* only one match is allowed per policy */				\
  static_assert(!is_tagged || 0 == remainder_is_non_default,		\
		"some policy was previously matched for " #PolicyBinderType \
		" when " #TagType " was encountered");			\
public:								        \
  /* use the previously bound policy unless the tag matches */		\
  using type = typename std::conditional<is_tagged, First, remainder>::type; \
  /* use the previously set match count */				\
  static const unsigned is_non_default =				\
    is_tagged ? 1 : remainder_is_non_default;				\
}


// helper templates

/**
 * Helper variadic class template that simply counts the number of
 * type parameters in its parameter pack.
 */
template<typename... ParameterPack>
struct param_pack_counter;

template<typename First, typename... Rest>
struct param_pack_counter<First, Rest...>
{
  static const unsigned value = 1 + param_pack_counter<Rest...>::value;
};

template <>
struct param_pack_counter<>
{
  static const unsigned value = 0;
};

/**
 * Helper variadic class template that counts the number of
 * non-default bindings made over a set of policy binders.
 */
template<typename... PolicyBinders>
struct bound_policy_counter;

template<typename First, typename... Rest>
struct bound_policy_counter<First, Rest...>
{
  static const unsigned value =
    First::is_non_default + bound_policy_counter<Rest...>::value;
};

template <>
struct bound_policy_counter<>
{
  static const unsigned value = 0;
};

} // namespace jrl

#endif // if !defined(JRL_VARIADIC_GUARD)
