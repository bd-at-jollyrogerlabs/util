/** -*- mode: c++ -*-
 *
 * stack_allocator
 *
 * Allocate memory on the stack using alloca for use with STL
 * containers.
 *
 * Copyright (C) 2016 Brian Davis
 * All Rights Reserved
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Author: Brian Davis <bd@jollyrogerlabs.com>
 *
 */

#if !defined(STACK_ALLOCATOR_GUARD)
#define STACK_ALLOCATOR_GUARD

#include <alloca.h>

namespace jrl
{

namespace util
{

using std::size_t;
using std::ptrdiff_t;

/**
 * Allocate you some memory on the stack!
 *
 * NOTE: avoid using this allocator for a container that will need to
 * reallocate memory a lot, one of the best use cases is a vector that
 * already knows how long it should be and can thus be constructed to
 * the nessary size or can call reserve() almost immediately after
 * construction.
 *
 * WARNING: this class does not function properly when used with
 * initializer lists.
 */
template<typename _AllocatedType>
class stack_allocator : public std::allocator<_AllocatedType>
{
  using base = std::allocator<_AllocatedType>;
public:
  using size_type = typename base::size_type;
  using difference_type = typename base::difference_type;
  using pointer = typename base::pointer;
  using const_pointer = typename base::const_pointer;
  using reference = typename base::reference;
  using const_reference = typename base::const_reference;
  using value_type = typename base::value_type;

  template<typename _RebindType>
  struct rebind
  {
    using other = stack_allocator<_RebindType>;
  };

  using propagate_on_container_move_assignment = std::true_type;

  stack_allocator() noexcept
  {
  }

  stack_allocator(const stack_allocator &__src) noexcept
  {
  }

  ~stack_allocator() noexcept
  {
  }

  pointer
  allocate(size_type __sz, const void* = nullptr)
  {
    if (__sz > this->max_size()) {
      throw std::bad_alloc();
    }
    // handle the case of 0 size in the same way that 'operator new' should
    if (!__sz) {
      __sz = 1;
    }
    return static_cast<_AllocatedType *>(alloca(__sz * sizeof(_AllocatedType)));
  }

  void
  deallocate(pointer __ptr, size_type)
  {
    // do nothing, memory allocated on the stack does not need to be deallocated
  }

  /**
   * Construct an object in raw memory using placement new
   */
  template<typename _TargetType, typename... _Args>
  void
  construct(_TargetType *__ptr, _Args&&... __args)
  {
    ::new((void *)__ptr) _TargetType(std::forward<_Args>(__args)...);
  }

  template<typename _TargetType>
  void
  destroy(_TargetType *__ptr)
  {
    __ptr->~_TargetType();
  }
};

}

}

#endif // if !defined(STACK_ALLOCATOR_GUARD)
