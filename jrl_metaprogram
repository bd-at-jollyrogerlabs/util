/** -*- mode: c++ -*-
 *
 * jrl_metaprogram
 *
 * Building blocks for metaprogramming.
 *
 * Copyright (C) 2014 Brian Davis
 * All Rights Reserved
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Author: Brian Davis <bd@jollyrogerlabs.com>
 *
 */

#if !defined(JRL_METAPROGRAM_GUARD)
#define JRL_METAPROGRAM_GUARD 1

/**
 * Selectively const-ify a type based on a compile time boolean.
 */
#define SELECTIVE_CONST(IsConst, BaseType) \
  typename std::conditional<IsConst, const BaseType, BaseType>::type

#define SELECT_TYPE(condition, TypeIfTrue, TypeIfFalse) \
  std::conditional<condition, TypeIfTrue, TypeIfFalse>::type

/**
 * Define the body of a policy binder type that can detect subclasses
 * of a tag type in a parameter pack.
 */
#define DEFINE_POLICY_BINDER(PolicyBinderType, DefaultPolicyType, TagType) \
/* declaration */							\
template<typename... Policies>					        \
struct PolicyBinderType;						\
/* base */								\
template<>								\
struct PolicyBinderType<>						\
{									\
  using type = DefaultPolicyType;					\
  static const unsigned is_non_default = 0;				\
};									\
/* induction */							        \
template<typename First, typename... Rest>				\
struct PolicyBinderType<First, Rest...>				        \
{									\
private:								\
  using remainder = typename PolicyBinderType<Rest...>::type;		\
  static const unsigned remainder_is_non_default =			\
    PolicyBinderType<Rest...>::is_non_default;				\
  static const bool is_tagged =						\
    std::is_base_of<TagType, First>::value;				\
  /* only one match is allowed per policy */				\
  static_assert(!is_tagged || (0 == remainder_is_non_default),		\
		"some policy was previously matched for " #PolicyBinderType \
		" when " #TagType " was encountered");			\
public:								        \
  /* use the previously bound policy unless the tag matches */		\
  using type = typename std::conditional<is_tagged, First, remainder>::type; \
  /* use the previously set match count */				\
  static const unsigned is_non_default =				\
    is_tagged ? 1 : remainder_is_non_default;				\
}

namespace jrl
{

/**
 * Helper variadic class template that simply counts the number of
 * type parameters in its parameter pack.
 */
template<typename... ParameterPack>
struct param_pack_size;

template<typename First, typename... Rest>
struct param_pack_size<First, Rest...>
{
  static const unsigned value = 1 + param_pack_size<Rest...>::value;
};

template <>
struct param_pack_size<>
{
  static const unsigned value = 0;
};

/**
 * Helper variadic class template that counts the number of
 * non-default bindings made over a set of policy binders.
 */
template<typename... PolicyBinders>
struct policy_bind_counter;

template<typename First, typename... Rest>
struct policy_bind_counter<First, Rest...>
{
  static const unsigned value =
    First::is_non_default + policy_bind_counter<Rest...>::value;
};

template <>
struct policy_bind_counter<>
{
  static const unsigned value = 0;
};

/**
 * Remove the const-ness from an argument.
 */
template<typename ContainerType>
inline typename ContainerType::iterator
remove_iterator_constness(ContainerType &container,
			  typename ContainerType::const_iterator itr)
{
  // NOTE: nice little hack to remove const-ness from an iterator
  // given access to its associated container; since second argument
  // to the range version of erase() specifies ONE PAST the end of the
  // range, passing the same iterator for both arguments will not
  // erase any elements, but the member function always returns a
  // non-const iterator.
  return container.erase(itr, itr);
}

} // namespace jrl

#endif // JRL_METAPROGRAM_GUARD
