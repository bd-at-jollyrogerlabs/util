/** -*- mode: c++ -*-
 *
 * boost_usability
 *
 * Header-only definitions to simplify use of various Boost
 * constructs.
 *
 * Copyright (C) 2015 Brian Davis
 * All Rights Reserved
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Author: Brian Davis <bd@jollyrogerlabs.com>
 *
 */

#ifndef BOOST_USABILITY_GUARD
#define BOOST_USABILITY_GUARD

#include <boost/iterator/zip_iterator.hpp>
#include <boost/range.hpp>

namespace jrl
{

/**
 * Variadic version of make_zip_iterator
 */
template<typename... T>
auto make_zip_iterator(const T &... containers) ->
  boost::iterator_range<boost::zip_iterator<decltype(boost::make_tuple(std::begin(containers)...))>>
{
  auto zip_begin = boost::make_zip_iterator(boost::make_tuple(std::begin(containers)...));
  auto zip_end = boost::make_zip_iterator(boost::make_tuple(std::end(containers)...));
  return boost::make_iterator_range(zip_begin, zip_end);
}

// @todo create a separate test case to document this
// partial example of use
//  vector<int> a;
//  double b[];
//  list<string> c;
//  for (auto tup : jrl::make_zip_iterator(a, b, c)) {
//    // ...
//  }

/**
 * Lockstep iterate over two containers, applying a binary operator
 * pairwise.  Any return value of the operator is ignored.
 */
template<typename Container1,
	 typename Container2,
	 typename BinaryOperation>
void
for_each_streams(Container1 &c1,
		 Container2 &c2,
		 BinaryOperation op)
{
  for (auto elem : make_zip_iterator(c1, c2)) {
    op(boost::get<0>(elem), boost::get<1>(elem));
  }
}

/**
 * Lockstep iterate over three containers, applying a ternary operator
 * triple-wise.  Any return value of the operator is ignored.
 */
template<typename Container1,
	 typename Container2,
	 typename Container3,
	 typename TernaryOperation>
void
for_each_streams(Container1 &c1,
		 Container2 &c2,
		 Container3 &c3,
		 TernaryOperation op)
{
  for (auto elem : make_zip_iterator(c1, c2, c3)) {
    op(boost::get<0>(elem), boost::get<1>(elem), boost::get<2>(elem));
  }
}

/**
 * Lockstep iterate over four containers, applying an operator
 * quad-wise.  Any return value of the operator is ignored.
 */
template<typename Container1,
	 typename Container2,
	 typename Container3,
	 typename Container4,
	 typename QuadOperation>
void
for_each_streams(Container1 &c1,
		 Container2 &c2,
		 Container3 &c3,
		 Container4 &c4,
		 QuadOperation op)
{
  for (auto elem : make_zip_iterator(c1, c2, c3, c4)) {
    op(boost::get<0>(elem), boost::get<1>(elem),
	 boost::get<2>(elem), boost::get<3>(elem));
  }
}

/**
 * Lockstep iterate over five containers, applying an operator.  Any
 * return value of the operator is ignored.
 */
template<typename Container1,
	 typename Container2,
	 typename Container3,
	 typename Container4,
	 typename Container5,
	 typename Operator>
void
for_each_streams(Container1 &c1,
		 Container2 &c2,
		 Container3 &c3,
		 Container4 &c4,
		 Container5 &c5,
		 Operator op)
{
  for (auto elem : make_zip_iterator(c1, c2, c3, c4, c5)) {
    op(boost::get<0>(elem), boost::get<1>(elem),
	 boost::get<2>(elem), boost::get<3>(elem),
	 boost::get<4>(elem));
  }
}

// /**
//  * Lockstep iterate over two containers applying the supplied binary
//  * operator pairwise and returning an iterator to the first element of
//  * the first container such that the operator returns true.
//  */
// template<typename Container1,
// 	 typename Container2,
// 	 typename BinaryOperation>
// typename Container1::const_iterator
// find_first_match(const Container1 &c1,
// 		 const Container2 &c2,
// 		 BinaryOperation op)
// {
// \TODO probably remove this or move to another library
// }

/**
 * Lockstep iterate over two containers, applying a binary operator
 * pairwise and storing the result in the output.
 */
template<typename Container1,
	 typename Container2,
	 typename OutputIterator,
	 typename BinaryOperation>
OutputIterator
transform_streams(const Container1 &c1,
		  const Container2 &c2,
		  OutputIterator res,
		  BinaryOperation op)
{
  for (auto elem : make_zip_iterator(c1, c2)) {
    res = op(boost::get<0>(elem), boost::get<1>(elem));
    ++res;
  }
  return res;
}

/**
 * Lockstep iterate over three containers, applying a ternary operator
 * pairwise and storing the result in the output.
 */
template<typename Container1,
	 typename Container2,
	 typename Container3,
	 typename OutputIterator,
	 typename TernaryOperation>
OutputIterator
transform_streams(const Container1 &c1,
		  const Container2 &c2,
		  const Container3 &c3,
		  OutputIterator res,
		  TernaryOperation op)
{
  for (auto elem : make_zip_iterator(c1, c2, c3)) {
    res = op(boost::get<0>(elem), boost::get<1>(elem), boost::get<2>(elem));
    ++res;
  }
  return res;
}

} // namespace jrl

#endif // BOOST_USABILITY_GUARD
