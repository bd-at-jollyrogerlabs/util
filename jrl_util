/** -*- mode: c++ -*-
 *
 * jrl_util
 *
 * Useful utility classes and functions that don't seem to belong
 * anywhere else.
 *
 * Copyright (C) 2014 Brian Davis
 * All Rights Reserved
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Author: Brian Davis <bd@jollyrogerlabs.com>
 *
 */

#if !defined(JRL_UTIL_GUARD)
#define JRL_UTIL_GUARD 1

// @todo move utilities that require bitset to a separate file
#include <bitset>
#include <limits>

namespace jrl
{

namespace util
{

/**
 * Wrapper for the insert result idiom for std::map where a result is
 * a 2-tuple with the first element giving a value and the second
 * element giving a boolean result code indicating success or failure
 * of (some aspect of) the operation.
 */
template<typename __BaseType>
struct bool_return : public std::tuple<__BaseType, bool>
{
  enum {
    VALUE = 0,
    RESULT = 1
  };
  using Inner = std::tuple<__BaseType, bool>;
  bool_return(const __BaseType value,
	      const bool isSuccess)
    : Inner(value, isSuccess)
  {
  }
  /**
   * Single-argument constructor gives successful return.
   */
  bool_return(const __BaseType value)
    : Inner(value, true)
  {
  }
};

/**
 * Function for converting a value into a bitset, which can be sent
 * directly to an ostream to display the binary representation of the
 * value.
 */
template<typename ArgType>
typename std::enable_if<std::is_unsigned<ArgType>::value, std::bitset<sizeof(ArgType) * 8>>::type
as_binary(const ArgType arg)
{
  return std::bitset<sizeof(ArgType) * 8>(arg);
}

/**
 * Template metaprogram that produces a bit mask with a number of bits
 * set and then shifted to the left by a specified number of
 * positions at static time.
 *
 * @todo C++98 style, should be replaced by make_bit_mask?
 */
template <unsigned SetBitCount, unsigned LeftShiftCount = 0>
class BitMaskStatic
{
  template<unsigned Mask, unsigned Counter>
  class Compute
  {
  public:
    enum { result = Mask | Compute<(Mask << 1), Counter - 1>::result };
  };

  // Base case: (0 == Counter) --> done counting
  template<unsigned Mask>
  class Compute<Mask, 0>
  {
  public:
    enum { result = 0 };
  };

  using BitSetType = std::bitset<sizeof(unsigned) * 8>;

public:
  enum {
    value = (Compute<1, SetBitCount>::result << LeftShiftCount)
  };

  /**
   * Useful for displaying the value as binary via ostream.
   */
  static BitSetType
  displayAsBinary() {
    return BitSetType(value);
  }

  /**
   * Function that produces a bit mask with a number of bits set and
   * then shifted to the left by a specified number of positions.
   *
   * Non-static equivalent to BitMaskStatic
   */
  static unsigned
  makeBitMask(const unsigned bitCount,
	      const unsigned leftShiftCount = 0)
  {
    unsigned result = 0;
    unsigned mask = 1;
    for (unsigned counter = 0; counter < bitCount; ++counter) {
      result |= mask;
      mask <<= 1;
    }
    result <<= leftShiftCount;
    return result;
  }
};

template <typename ValueType, unsigned SetBitCount, unsigned LeftShiftCount = 0>
class BitMaskStatic_experimental
{
  template<unsigned Mask, unsigned Counter>
  class Compute
  {
  public:
    enum { result = Mask | Compute<(Mask << 1), Counter - 1>::result };
  };

  // Base case: (0 == Counter) --> done counting
  template<unsigned Mask>
  class Compute<Mask, 0>
  {
  public:
    enum { result = 0 };
  };

public:
  static const ValueType value =
    (static_cast<ValueType>(Compute<1, SetBitCount>::result)) << LeftShiftCount;
};

/**
 * Function that produces a bit mask with a number of bits set and
 * then shifted to the left by a specified number of positions.
 *
 * @todo use static assert to force the result type to be unsigned
 * numeric?
 */
template<typename ResultType>
constexpr ResultType
make_bit_mask(const unsigned bitCount,
	      const unsigned leftShiftCount = 0)
{
  ResultType result = 0;
  ResultType mask = (bitCount > 0) ? 1 : 0;
  for (unsigned counter = 0; counter < bitCount; ++counter) {
    result |= mask;
    mask <<= 1;
  }
  result <<= leftShiftCount;
  return result;
}

#if defined(USE_TIMESPEC_WRAP)
/**
 * Object wrapped around timespec.
 *
 * @todo use the standard C library versions and mark this as
 * deprecated
 */
class TimeSpecWrap
{
public:
  TimeSpecWrap()
    : clockId_(CLOCK_MONOTONIC)
  {
    memset(&time_, 0, sizeof(time_));
  }

  TimeSpecWrap(const clockid_t clockId)
    : clockId_(clockId)
  {
    memset(&time_, 0, sizeof(time_));
  }

  TimeSpecWrap(const TimeSpecWrap &src)
    : time_(src.time_), clockId_(src.clockId_)
  {
  }

  virtual ~TimeSpecWrap()
  {
  }

  const TimeSpecWrap &
  operator=(const TimeSpecWrap &rhs)
  {
    clockId_ = rhs.clockId_;
    time_ = rhs.time_;
    return *this;
  }

  int
  set()
  {
    return clock_gettime(clockId_, &time_);
  }

  struct timespec
  get() const
  {
    return time_;
  }

  time_t
  sec() const
  {
    return time_.tv_sec;
  }

  long
  nsec() const
  {
    return time_.tv_nsec;
  }

  uint64_t
  totalNsec() const
  {
    return (static_cast<uint64_t>(time_.tv_sec) * ONE_SECOND) +
      static_cast<uint64_t>(time_.tv_nsec);
  }

  uint64_t
  totalUsec() const
  {
    return ((static_cast<uint64_t>(time_.tv_sec) * ONE_SECOND) +
	    static_cast<uint64_t>(time_.tv_nsec) / 1000);
  }

  uint64_t
  totalMsec() const
  {
    return ((static_cast<uint64_t>(time_.tv_sec) * ONE_SECOND) +
	    static_cast<uint64_t>(time_.tv_nsec) / 1000000);
  }

  bool
  operator<(const TimeSpecWrap &rhs) const
  {
    if (time_.tv_sec < rhs.time_.tv_sec) {
      return true;
    }
    if (time_.tv_sec > rhs.time_.tv_sec) {
      return false;
    }
    if (time_.tv_nsec < rhs.time_.tv_nsec) {
      return true;
    }
    return false;
  }

  // NOTE: absolute value diff
  const TimeSpecWrap
  operator-(const TimeSpecWrap &rhs) const
  {
    TimeSpecWrap result(clockId_);
    const bool isLhsLess = *this < rhs;
    const struct timespec *const start = isLhsLess ? &time_ : &(rhs.time_);
    const struct timespec *const end = isLhsLess ? &(rhs.time_) : &time_;
    result.time_.tv_sec = end->tv_sec - start->tv_sec;
    if ((end->tv_nsec - start->tv_nsec) < 0) {
      result.time_.tv_sec -= 1;
      result.time_.tv_nsec = ONE_SECOND + (end->tv_nsec - start->tv_nsec);
    }
    else {
      result.time_.tv_nsec = end->tv_nsec - start->tv_nsec;
    }
    return result;
  }

private:

  enum {
    ONE_SECOND = 1000000000
  };

  struct timespec time_;
  clockid_t clockId_;
};
#endif

} // namespace util

} // namespace jrl

/* EXPERIMENTAL, stolen from stackoverflow */
// namespace fast_random
// {
// static uint64_t x=123456789, y=362436069, z=521288629;

// //period 2^96-1
// uint64_t
// xorshf96(void)
// {
//   uint64_t t;
//   x ^= x << 16;
//   x ^= x >> 5;
//   x ^= x << 1;

//   t = x;
//   x = y;
//   y = z;
//   z = t ^ x ^ y;

//   return z;
// }
// }

#endif // JRL_UTIL_GUARD
