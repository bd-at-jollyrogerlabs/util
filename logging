/** -*- mode: c++ -*-
 *
 * logging
 *
 * Copyright (C) 2015 Brian Davis
 * All Rights Reserved
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Limited copying permission is given solely
 * for self-educational purpose.
 *
 * Author: Brian Davis <bd@jollyrogerlabs.com>
 *
 */


#if !defined(LOGGING_GUARD)
#define LOGGING_GUARD 1

#include "unitsafe"

#define LOG_STREAM std::cerr

namespace jrl
{

namespace logging_hidden
{
  enum {
    TRACE_LEVEL_FLAG = 1,
    DEBUG_LEVEL_FLAG = 1 << 1,
    INFO_LEVEL_FLAG = 1 << 2,
    WARN_LEVEL_FLAG = 1 << 3,
    ERROR_LEVEL_FLAG = 1 << 4,
    FATAL_LEVEL_FLAG = 1 << 5
  };
} // namespace logging_hidden

MAKE_UNITSAFE(LogLevelFlags, uint8_t);

#define ENABLE_LOG_LEVEL_BUILDER(NEW_LEVEL)				\
  do {									\
    BASE_TYPE(jrl::LogLevelFlags) flags = BASE_CAST(logLevelFlags_g);	\
    flags |= static_cast<BASE_TYPE(jrl::LogLevelFlags)>(jrl::logging_hidden::NEW_LEVEL ## _LEVEL_FLAG); \
    logLevelFlags_g = jrl::LogLevelFlags(flags);			\
  } while (0)

#define DISABLE_LOG_LEVEL_BUILDER(NEW_LEVEL)				\
  do {									\
    BASE_TYPE(jrl::LogLevelFlags) flags = BASE_CAST(logLevelFlags_g);	\
    flags &= ~(static_cast<BASE_TYPE(jrl::LogLevelFlags)>(jrl::logging_hidden::NEW_LEVEL ## _LEVEL_FLAG)); \
    logLevelFlags_g = jrl::LogLevelFlags(flags);			\
  } while (0)

#define ENABLE_TRACE ENABLE_LOG_LEVEL_BUILDER(TRACE)
#define ENABLE_DEBUG ENABLE_LOG_LEVEL_BUILDER(DEBUG)
#define ENABLE_INFO ENABLE_LOG_LEVEL_BUILDER(INFO)
#define ENABLE_WARN ENABLE_LOG_LEVEL_BUILDER(WARN)
#define ENABLE_ERROR ENABLE_LOG_LEVEL_BUILDER(ERROR)
#define ENABLE_FATAL ENABLE_LOG_LEVEL_BUILDER(FATAL)

#define DISABLE_TRACE DISABLE_LOG_LEVEL_BUILDER(TRACE)
#define DISABLE_DEBUG DISABLE_LOG_LEVEL_BUILDER(DEBUG)
#define DISABLE_INFO DISABLE_LOG_LEVEL_BUILDER(INFO)
#define DISABLE_WARN DISABLE_LOG_LEVEL_BUILDER(WARN)
#define DISABLE_ERROR DISABLE_LOG_LEVEL_BUILDER(ERROR)
#define DISABLE_FATAL DISABLE_LOG_LEVEL_BUILDER(FATAL)

#define TRACE(msg)							\
  do {									\
    if (BASE_CAST(logLevelFlags_g) & jrl::logging_hidden::TRACE_LEVEL_FLAG) { \
      LOG_STREAM << "TRACE: " << msg << std::endl;			\
    }									\
  } while (0)

#define DEBUG(msg)							\
  do {									\
    if (BASE_CAST(logLevelFlags_g) & jrl::logging_hidden::DEBUG_LEVEL_FLAG) { \
      LOG_STREAM << "DEBUG: " << msg << std::endl;			\
    }									\
  } while (0)

#define INFO(msg)							\
  do {									\
    if (BASE_CAST(logLevelFlags_g) & jrl::logging_hidden::INFO_LEVEL_FLAG) { \
      LOG_STREAM << "INFO: " << msg << std::endl;			\
    }									\
  } while (0)

#define WARN(msg)							\
  do {									\
    if (BASE_CAST(logLevelFlags_g) & jrl::logging_hidden::WARN_LEVEL_FLAG) { \
      LOG_STREAM << "WARN: " << msg << std::endl;			\
    }									\
  } while (0)

#define ERROR(msg)							\
  do {									\
    if (BASE_CAST(logLevelFlags_g) & jrl::logging_hidden::ERROR_LEVEL_FLAG) { \
      LOG_STREAM << "ERROR: " << msg << std::endl;			\
    }									\
  } while (0)

#define FATAL(msg)							\
  do {									\
    if (BASE_CAST(logLevelFlags_g) & jrl::logging_hidden::FATAL_LEVEL_FLAG) { \
      LOG_STREAM << "FATAL: " << msg << std::endl;			\
    }									\
  } while (0)

} // namespace jrl

// NOTE: enables all levels other than TRACE and DEBUG by default
#define USE_LOGGING				\
  namespace					\
{						\
  jrl::LogLevelFlags logLevelFlags_g =		\
    jrl::logging_hidden::INFO_LEVEL_FLAG |	\
    jrl::logging_hidden::WARN_LEVEL_FLAG |	\
    jrl::logging_hidden::ERROR_LEVEL_FLAG |	\
    jrl::logging_hidden::FATAL_LEVEL_FLAG;	\
}

#endif // LOGGING_GUARD
