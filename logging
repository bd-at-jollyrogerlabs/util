/** -*- mode: c++ -*-
 *
 * logging
 *
 * Copyright (C) 2015 Brian Davis
 * All Rights Reserved
 *
 * // \TODO update license
 *
 * Limited copying permission is given solely
 * for self-educational purpose.
 *
 * Author: Brian Davis <bd@jollyrogerlabs.com>
 *
 */


#ifndef LOGGING_H
#define LOGGING_H 1

namespace jrl
{

enum {
  DEBUG_LEVEL = 0,
  INFO_LEVEL = 1,
  WARN_LEVEL = 2,
  ERROR_LEVEL = 3,
  FATAL_LEVEL = 4,

  DEBUG_LEVEL_FLAG = 1,
  INFO_LEVEL_FLAG = 1 << INFO_LEVEL,
  WARN_LEVEL_FLAG = 1 << WARN_LEVEL,
  ERROR_LEVEL_FLAG = 1 << ERROR_LEVEL,
  FATAL_LEVEL_FLAG = 1 << FATAL_LEVEL
};

} // namespace jrl

// \TODO doesn't actually work for more than one file
static uint8_t logLevelFlags_g =
  jrl::INFO_LEVEL_FLAG | jrl::WARN_LEVEL_FLAG | jrl::ERROR_LEVEL_FLAG | jrl::FATAL_LEVEL_FLAG;

namespace jrl
{

inline void
enableLogLevel(const uint8_t level)
{
  assert(level <= FATAL_LEVEL);
  logLevelFlags_g |= (1 << level);
}

inline void
disableLogLevel(const uint8_t level)
{
  assert(level <= FATAL_LEVEL);
  logLevelFlags_g &= ~(1 << level);
}

}  // namespace jrl

#define DEBUG(...)						\
  do {								\
    if (logLevelFlags_g & jrl::DEBUG_LEVEL_FLAG) {		\
      std::cerr << "DEBUG: " << __VA_ARGS__ << std::endl;	\
    }								\
  } while (0)

#define INFO(...)						\
  do {								\
    if (logLevelFlags_g & jrl::INFO_LEVEL_FLAG) {		\
      std::cerr << "INFO: " << __VA_ARGS__ << std::endl;	\
    }								\
  } while (0)

#define WARN(...)						\
  do {								\
    if (logLevelFlags_g & jrl::WARN_LEVEL_FLAG) {		\
      std::cerr << "WARN: " << __VA_ARGS__ << std::endl;	\
    }								\
  } while (0)

#define ERROR(...)						\
  do {								\
    if (logLevelFlags_g & jrl::ERROR_LEVEL_FLAG) {		\
      std::cerr << "ERROR: " << __VA_ARGS__ << std::endl;	\
    }								\
  } while (0)

#define FATAL(...)						\
  do {								\
    if (logLevelFlags_g & jrl::FATAL_LEVEL_FLAG) {		\
      std::cerr << "FATAL: " << __VA_ARGS__ << std::endl;	\
    }								\
  } while (0)

#endif // LOGGING_H
