/** -*- mode: c++ -*-
 *
 * log2int
 *
 * Integer portion of base 2 logarithm.
 *
 * Copyright (C) 2014 Brian Davis
 * All Rights Reserved
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Author: Brian Davis <bd@jollyrogerlabs.com>
 *
 */

#if !defined(LOG2INT_GUARD)
#define LOG2INT_GUARD 1

namespace jrl
{

/**
 * Integer portion of base 2 logarithm of the argument, calculated
 * statically; equivalent to static_cast<unsigned>(floor(log2(Argument))).
 *
 * FIXME: find a way to allow polymorphism on the argument type to
 * support arguments other than 'unsigned'.
 */
template<unsigned _Argument>
class Log2IntStatic
{
  static_assert(_Argument > 0, "Logarithm of 0 is undefined");
  // Successively shift the mask to the right to search downward
  // through the bits of the argument to find the highest bit which is
  // set; the position number of the highest set bit is equal to the
  // integer portion of the base 2 logarithm of the argument.
  template<unsigned HighestSetBit, unsigned Mask, unsigned Arg>
  class Compute
  {
  public:
    // Mask matches Arg, HighestSetBit is the result.

    // Reduce the highest set bit number by 1, shift the mask
    // downward by 1, and try again.
    enum { result = (Mask & Arg) ?
	     HighestSetBit :
	     Compute<(HighestSetBit - 1), (Mask >> 1), Arg>::result };
  };

  // This specialization is the terminating case: the argument is 0,
  // indicating that the mask has run out, so the resulting base 2
  // logarithm value is 0 (note that the case of log(0) is already
  // handled by a static_assert).
  template<unsigned _Mask, unsigned _Arg>
  class Compute<0, _Mask, _Arg>
  {
  public:
    enum { result = 0 };
  };

  // HIGHEST_BIT_POSITION is the highest bit position in the argument.
  enum { HIGHEST_BIT_POSITION = ((8 * sizeof(_Argument)) - 1) };

public:
  // Start the static computation by composing a mask with the highest
  // bit position set and all other bit positions cleared.
  enum { value = Compute<static_cast<unsigned>(HIGHEST_BIT_POSITION),
	                 static_cast<unsigned>(1 << HIGHEST_BIT_POSITION),
	                 _Argument>::result };
};

/**
 * Integer portion of base 2 logarithm of the argument, equivalent to
 * static_cast<_UnsignedType>(floor(log2(Argument))).
 *
 * Non-static equivalent to BitMaskStatic
 */
template<typename _UnsignedType>
_UnsignedType
log2int(_UnsignedType arg)
{
  assert(arg > 0);
  // Find the highest bit position in the argument type.
  const _UnsignedType highestBitPosition = ((8 * sizeof(arg)) - 1);
  // Generate a mask by shifting a 1 into the highest bit position
  // (all other bits are 0).
  _UnsignedType mask = static_cast<_UnsignedType>(1) << highestBitPosition;
  // Successively shift the mask to the right to search downward
  // through the bits of the argument to find the highest bit which is
  // set; the position number of the highest set bit is equal to the
  // integer portion of the base 2 logarithm of the argument.
  _UnsignedType highestSetBit;
  for (highestSetBit = highestBitPosition;
       highestSetBit > 0;
       --highestSetBit, mask >>= 1) {
    if (mask & arg) {
      break;
    }
  }
  return highestSetBit;
}

} // namespace jrl

#endif // !defined(LOG2INT_GUARD)
